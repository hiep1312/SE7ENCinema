<?php

namespace Database\Seeders;

use App\Models\Comment;
use App\Models\Movie;
use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Arr;
use Illuminate\Support\Carbon;

class CommentSeeder extends Seeder
{
    public function run(): void
    {
        $userIds  = User::pluck('id');
        $movieIds = Movie::where('status', 'showing')->pluck('id');

        if ($userIds->isEmpty() || $movieIds->isEmpty()) {
            $this->command?->warn('‚ö†Ô∏è Thi·∫øu users ho·∫∑c movies ƒë·ªÉ seed b√¨nh lu·∫≠n.');
            return;
        }

        $topContents = [
            'Phim n√†y th·∫≠t s·ª± tuy·ªát v·ªùi, di·ªÖn vi√™n di·ªÖn r·∫•t t·ª± nhi√™n.',
            'C·ªët truy·ªán h·∫•p d·∫´n nh∆∞ng m·ªôt s·ªë c·∫£nh h∆°i d√†i.',
            '√Çm nh·∫°c r·∫•t hay, k·∫øt h·ª£p ho√†n h·∫£o v·ªõi c·∫£nh quay.',
            'M√¨nh th√≠ch nh√¢n v·∫≠t ch√≠nh, r·∫•t c·∫£m x√∫c v√† ch√¢n th·∫≠t.',
            'Hi·ªáu ·ª©ng h√¨nh ·∫£nh ƒë·∫πp nh∆∞ng n·ªôi dung h∆°i nh·∫°t.',
            'Phim n√†y khi·∫øn m√¨nh c∆∞·ªùi kh√¥ng ng·ªõt, qu√° h√†i h∆∞·ªõc!',
            'M·ªôt b·ªô phim ƒë√°ng ƒë·ªÉ xem c√πng gia ƒë√¨nh.',
            'Di·ªÖn vi√™n ph·ª• xu·∫•t s·∫Øc, t·∫°o ƒëi·ªÉm nh·∫•n cho phim.',
            'C·ªët truy·ªán xoay quanh t√¨nh b·∫°n r·∫•t c·∫£m ƒë·ªông.',
            'Phim k·∫øt th√∫c b·∫•t ng·ªù, kh√¥ng ƒëo√°n tr∆∞·ªõc ƒë∆∞·ª£c.',
            '√Çm thanh v√† √°nh s√°ng ƒë∆∞·ª£c ph·ªëi h·ª£p r·∫•t chuy√™n nghi·ªáp.',
            'M·ªôt tr·∫£i nghi·ªám ƒëi·ªán ·∫£nh ƒë√°ng nh·ªõ.',
            'Phim c√≥ nhi·ªÅu c·∫£nh quay ƒë·∫πp nh∆∞ng h∆°i d√†i d√≤ng.',
            'Di·ªÖn vi√™n ch√≠nh c√≥ bi·ªÉu c·∫£m qu√° t·ªët.',
            'M√¨nh mu·ªën xem l·∫°i l·∫ßn n·ªØa v√¨ qu√° hay.',
            'C·ªët truy·ªán ph·ª©c t·∫°p nh∆∞ng h·∫•p d·∫´n.',
            'Phim mang nhi·ªÅu th√¥ng ƒëi·ªáp √Ω nghƒ©a.',
            'M·ªôt b·ªô phim h√†nh ƒë·ªông ƒë·∫ßy k·ªãch t√≠nh.',
            'H√†i h∆∞·ªõc, vui nh·ªôn nh∆∞ng v·∫´n c√≥ chi·ªÅu s√¢u.',
            'K·∫øt th√∫c phim th·∫≠t s·ª± khi·∫øn m√¨nh b·∫•t ng·ªù.',
        ];

        $replyTemplates = [
            'Chu·∫©n lu√¥n, m√¨nh c≈©ng th·∫•y v·∫≠y.',
            'Theo m√¨nh th√¨ {soft_contra} nh√©.',
            'ƒê·ªìng √Ω ph·∫ßn l·ªõn, nh∆∞ng ƒëo·∫°n gi·ªØa h∆°i l√™ th√™.',
            'C√¥ng nh·∫≠n √¢m nh·∫°c n·ªïi b·∫≠t th·∫≠t.',
            'M√¨nh th·∫•y di·ªÖn xu·∫•t ·ªïn, nh·∫•t l√† nh√¢n v·∫≠t ch√≠nh.',
            'C√≥ ai ƒë·ªÉ √Ω c·∫£nh {scene} kh√¥ng? Kh√° ·∫•n t∆∞·ª£ng ƒë√≥.',
            'N·∫øu r√∫t ng·∫Øn ~10 ph√∫t th√¨ nh·ªãp t·ªët h∆°n.',
            'Xem c√πng gia ƒë√¨nh th√¨ tuy·ªát v·ªùi.',
            'C√¥ng nh·∫≠n c√°i k·∫øt plot twist gh√™!',
            'Hi·ªáu ·ª©ng t·ªët nh∆∞ng c·∫£m x√∫c ch∆∞a t·ªõi l·∫Øm v·ªõi m√¨nh.',
            'ƒêo·∫°n cao tr√†o l√†m m√¨nh n·ªïi da g√†.',
            'M√¨nh th·∫•y ph·∫ßn build nh√¢n v·∫≠t r·∫•t ·ªïn.',
            'T·ªïng th·ªÉ ƒë√°ng ti·ªÅn v√©.',
            'Xem IMAX ch·∫Øc c√≤n ph√™ h∆°n.',
            'M·ªçi ng∆∞·ªùi nghƒ© b·∫£n OST th·∫ø n√†o?',
        ];
        $softContra = ['kh√¥ng h·∫≥n v·∫≠y', 'ch∆∞a ch·∫Øc', 'm√¨nh c√≥ c·∫£m nh·∫≠n kh√°c', 'm√¨nh ph√¢n v√¢n'];
        $scenes     = ['r∆∞·ª£t ƒëu·ªïi', 'ho√†ng h√¥n', 'm·ªü m√†n', 'after-credit', 'ƒë·ªëi tho·∫°i trong m∆∞a'];

        $getStatus = function (): string {
            $r = random_int(1, 100);
            if ($r <= 85) return 'active';
            if ($r <= 95) return 'hidden';
            return 'deleted';
        };

        foreach ($movieIds as $movieId) {
            $topCount = 1 + random_int(0, 3);

            
            $mustAuthor = $userIds->random();
            $baseTime   = Carbon::now()->subDays(random_int(0, 30))->subMinutes(random_int(0, 1440));

            $topActive = Comment::create([
                'user_id'           => $mustAuthor,
                'movie_id'          => $movieId,
                'parent_comment_id' => null,
                'reply_comment_id'  => null,
                'content'           => $this->humanize(Arr::random($topContents)),
                'status'            => 'active',
                'created_at'        => $baseTime,
                'updated_at'        => $baseTime,
            ]);

            
            for ($i = 2; $i <= $topCount; $i++) {
                $time = (clone $baseTime)->addMinutes(random_int(5, 120));
                Comment::create([
                    'user_id'           => $userIds->random(),
                    'movie_id'          => $movieId,
                    'parent_comment_id' => null,
                    'reply_comment_id'  => null,
                    'content'           => $this->humanize(Arr::random($topContents)),
                    'status'            => $getStatus(),
                    'created_at'        => $time,
                    'updated_at'        => $time,
                ]);
            }

            // T·∫°o reply cho b√¨nh lu·∫≠n g·ªëc
            $replyMin = 1;
            $replyMax = 5;
            $replyCount = random_int($replyMin, $replyMax);

            $cursorTime     = (clone $topActive->created_at);
            $candidateUsers = $userIds->reject(fn ($id) => (int)$id === (int)$topActive->user_id)->values();

            for ($j = 1; $j <= $replyCount; $j++) {
                $cursorTime = (clone $cursorTime)->addMinutes(random_int(3, 25));

                $tpl = Arr::random($replyTemplates);
                $text = str_replace(
                    ['{soft_contra}', '{scene}'],
                    [Arr::random($softContra), Arr::random($scenes)],
                    $tpl
                );
                $tails = ['', '', ' üëç', ' ü§î', ' üòÖ', ' ‚Äî xem ·ªïn ph·∫øt!', ' ‚Äî ƒë√°ng ƒë·ªÉ r·ªß b·∫°n ƒëi xem!'];
                $content = $this->humanize($text . Arr::random($tails));

                Comment::create([
                    'user_id'           => $candidateUsers->random(),
                    'movie_id'          => $movieId,
                    'parent_comment_id' => $topActive->id,
                    'reply_comment_id'  => $topActive->id,
                    'content'           => $content,
                    'status'            => $getStatus(),
                    'created_at'        => $cursorTime,
                    'updated_at'        => $cursorTime,
                ]);
            }
        }
    }

    private function humanize(string $text): string
    {
        $text = trim($text);

        if ($text !== '' && mb_strtolower(mb_substr($text, 0, 1)) === mb_substr($text, 0, 1)) {
            $text = mb_strtoupper(mb_substr($text, 0, 1)) . mb_substr($text, 1);
        }

        if (!preg_match('/[.!?‚Ä¶]$/u', $text)) {
            $endings = ['.', '.', '.', '!', '‚Ä¶'];
            $text .= Arr::random($endings);
        }

        $text = preg_replace('/([^\s])(üòÖ|ü§î|üëç)/u', '$1 $2', $text);

        return $text;
    }
}
